{
    "ConnectionStrings": {
        // Do not remove these dummy values, dotnet is a little bit stupid and requires those for the pipeline, even though they are never used...
        "App": "Server=BOSS-5CD1512JXT\\SQLEXPRESS;Database=TestDb;Integrated Security=SSPI;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=True",
        "Log": "Server=BOSS-5CD1512JXT\\SQLEXPRESS;Database=TestDb;Integrated Security=SSPI;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=True",
        "Jobs": "Server=BOSS-5CD1512JXT\\SQLEXPRESS;Database=TestDb;Integrated Security=SSPI;Trusted_Connection=True;MultipleActiveResultSets=true;TrustServerCertificate=True"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft": "Warning",
            "Microsoft.Hosting.Lifetime": "Information"
        }
    },
    "AllowedHosts": "*",
    "AllowedOrigins": [ "http://localhost:5237" ],
    "ApplicationBaseUrl": "http://localhost:5173",
    //"AllowedOrigins": [ "http://localhost:51094", "https://localhost:51095" ],
    "Smtp": {
        "Username": "services.microsoft365@bossinfo.ch", // Username of the smtp credentials
        "Password": "Xp21$Bq!7Dv$s", // Password of the smtp credentials
        "DisplayName": "services.microsoft365@bossinfo.ch", // The displayname of the sender
        "DisplayAddress": "services.microsoft365@bossinfo.ch", // The email of the sender
        "Server": "smtp.office365.com", // The server address
        "EnableSSL": true, // Send emails over SSL?
        "Port": 587, // The port to use
        "UseOverrideEmail": true, // If true, all emails are sent to {OverrideAddress}
        "OverrideAddress": "ioannis.georgantzoglou@bossinfo.ch", // The address all the mails are sent to, if {UseOverrideEmail} equals true
        "UseBccAddress": false, // If true, all mails contain {BccAddress} in BCC
        "BccAddress": "" // The address in BCC, if {UseBccAddress} is active
    },
    "Auth": {
        "JWT": {
            "AccessTokenTTL": 2000, // Access token lifetime in minutes 
            "ValidAudience": "Audience", // For whom this token was created for
            "ValidateAudience": true, // Should be checked for whom this token was created for?
            "ValidIssuer": "Issuer", // The issuer which created this token
            "ValidateIssuer": true, // Should be checked who created this token?
            "validateLifetime": true, // If the lifetime of this token should be checked
            "SigningKey": "TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST", // The key used to sign this token
            "ValidateIssuerSigningKey": false // Only used when using X509 certificates, validate the certificate
        },
        "RefreshToken": {
            "SigningKey": "1234_1234_1234_1234_1234_1234_1234_1234", // The key used to sign the refresh token
            "ShortTTL": 30000, // How long to stay signed in if remember me is NOT selected (in minutes)
            "LongTTL": 30 // How long to stay signed in if remember me is selected (in days)
        },
        "Cookies": {
            "Refresh": {
                "HttpOnly": true,
                //SameSite parameter, indicates if the cookies should be included by the client on future "same-site" or "cross-site" requests.
                // Strict = 2, should only send the cookie with "same-site" requests
                // Lax = 1,  "same-site" requests, and "cross-site" top-level navigations.
                // None = 0, disable same-site restrictions.
                // Unspecified = -1, the client should follow its default cookie policy
                "SameSite": 2,
                "Secure": true
            }
        },
        "Identity": {
            "Lockout": {
                "AllowedForNewUsers": true, // Should new users be locked out if they fail too many times?
                "DefaultLockoutTimeSpan": 10, // How long users should be locked out in minutes
                "MaxFailedAccessAttempts": 5 // How many times an user may input an wrong password
            },
            "SignIn": {
                "RequireConfirmedEmail": true, // If user can only login with confirmed email?
                "RequireConfirmedPhoneNumber": false // If user can only login with confirmed phone?
            },
            "Password": {
                "RequireDigit": true, // If the password requires a digit in it
                "RequireLowercase": true, // If the password requires a lowercase character in it
                "RequireUppercase": true, // If the password requires an uppercase character in it
                "RequireNonAlphanumeric": false, // If the password requires a special character in it
                "RequiredLength": 8, // The minimum length of a password
                "RequiredUniqueChars": 4 // The least amount of different characters in the password
            },
            "User": {
                "AllowedUserNameCharacters": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.-", // The characters allowed as username
                "RequireUniqueEmail": true // If the email of each user needs to be unique
            }
        },
        "TwoFactor": {
            "EnforceTwoFactor": false // If users are only allowed to login if two factor is enabled
        }
        //"AdminAdGroupID": "d2651171-9ee9-4640-aa23-9d2d98997ad4"
    },
    "Cache": {
        "HourInterval": 3 // The time data saved in cache memory in hours
    },
    "Translations": {
        "DefaultLanguageIdentifier": "EN",
        "AcceptedLanguages": [ "DE", "EN" ]
    }
}
